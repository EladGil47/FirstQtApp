#include "mainwindow.h"
#include "QtFiles/ui_mainwindow.h"

#include "kohot.hpp"

#include <QLabel>
#include <QVBoxLayout>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
   ui->setupUi(this);

    // Create a central widget to hold your layout
    std::shared_ptr<QWidget> centralWidget = std::make_shared<QWidget>();
    setCentralWidget(centralWidget.get());

    // Create the main layout for the central widget
    std::shared_ptr<QVBoxLayout> mainLayout = createMainLayout();

    // Add the main layout to the central widget
    centralWidget->setLayout(mainLayout.get());

    
    // Set the main window properties
    setWindowTitle("Kohot");
    resize(800, 400); 

 
}

MainWindow::~MainWindow()
{
    delete ui;
}

////////////////////////////////////
 #ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>


#include <QLabel>
#include <QPushButton>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QFont>
#include <QListWidget>

#include <memory>


QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();
    std::shared_ptr<QVBoxLayout> createMainLayout()
    {
        std::shared_ptr<QVBoxLayout> mainLayout = std::make_shared<QVBoxLayout>();

        // Create the welcome layout (welcome text and button)
        std::shared_ptr<QVBoxLayout> welcomeLayout = createWelcomeLayout();
        mainLayout->addLayout(welcomeLayout.get());

        // // Create the groups layout (Groups: label and QListWidget)
        // QVBoxLayout *groupsLayout = createGroupsLayout();
        // mainLayout->addLayout(groupsLayout,4);

        // // Create a vertical layout for the button section (4 horizontal layouts)
        // QVBoxLayout *buttonSectionLayout = createButtonSectionLayout();
        // mainLayout->addLayout(buttonSectionLayout, 2); // Row 6

        return mainLayout;
    }

    std::shared_ptr<QLabel> createWelcomeLabel()
    {
        std::shared_ptr welcomeLabel = std::make_shared<QLabel>("Welcome to My App!", this);
        welcomeLabel->setAlignment(Qt::AlignHCenter);
        welcomeLabel->setFont(QFont("Arial", 24, QFont::Bold)); // Set font and size
        return welcomeLabel;

    }

    std::shared_ptr<QVBoxLayout> createWelcomeLayout()
    {
        std::shared_ptr <QVBoxLayout> welcomeLayout = std::make_shared<QVBoxLayout>();
        std::shared_ptr <QLabel> welcomeLabel = createWelcomeLabel();
        welcomeLayout->addWidget(welcomeLabel.get());
        return welcomeLayout;
    }

    QVBoxLayout *createGroupsLayout()
    {
        QVBoxLayout *groupsLayout = new QVBoxLayout;

        // Create a QLabel for "Groups:"
        QLabel *groupsLabel = new QLabel("Groups:", this);
        groupsLayout->addWidget(groupsLabel);

        // Create a QListWidget to hold the list of groups
        QListWidget *groupsListWidget = new QListWidget(this);
        groupsLayout->addWidget(groupsListWidget);

        return groupsLayout;
    }

    QVBoxLayout *createButtonSectionLayout()
    {
        QVBoxLayout *buttonSectionLayout = new QVBoxLayout;

        QHBoxLayout *buttonLayout = new QHBoxLayout;

        // Create 4 horizontal layouts for the buttons
        QPushButton *button1 = createButton("Button 1");
        QPushButton *button2 = createButton("Button 2");
        QPushButton *button3 = createButton("Button 3");
        QPushButton *button4 = createButton("Button 4");

        // Add the button layouts to the vertical layout
        buttonLayout->addWidget(button1,1);
        buttonLayout->addWidget(button2,1);
        buttonLayout->addWidget(button3,1);
        buttonLayout->addWidget(button4,1);

        buttonSectionLayout->addLayout(buttonLayout);

        return buttonSectionLayout;
    }

    QPushButton *createButton(const QString &buttonText)
    {
        QPushButton *button = new QPushButton(buttonText, this);

        // Connect the button's clicked signal to a slot or lambda (optional)
        connect(button, &QPushButton::clicked, [buttonText]() {
            qDebug() << "Button clicked:" << buttonText;
        });

        return button;
    }



private:
    Ui::MainWindow *ui;
};
#endif // MAINWINDOW_H
